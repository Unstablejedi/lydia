using Giraffe.Service.Models;
using Giraffe.Service.Models.ODataModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Giraffe.Service
{
    public class BusinessService
    {
        private readonly DataService _service;

        public BusinessService(string connectionString)
        {
            _service = new DataService(connectionString);
        }

        public Teams GetTeam(int teamId)
        {
            return _service.GetTeam(teamId);
        }

        public IEnumerable<Teams> GetTeams()
        {
            return _service.GetTeams();
        }

        public IEnumerable<Teams> GetDetailedAudit()
        {
            return _service.GetDetailedAudit();
        }

        public IEnumerable<Staff> GetStaffByFilier(int filierId)
        {
            return _service.GetStaffByFilier(filierId);
        }

        public IEnumerable<Staff> GetStaffByTeamId(int teamId)
        {
            return _service.GetStaffByTeamId(teamId);
        }

        public IEnumerable<Staff> GetStaffByTeamId(int teamId, int filiereId)
        {
            return _service.GetStaffByTeamId(teamId,filiereId);
        }

        public Teams GetTeamFiliereMappingByTeamId(int teamId)
        {
            return _service.GetTeamFiliereMappingByTeamId(teamId);
        }

        public FiliereInformation GetFiliereInformation(int filiereId)
        {
            return _service.GetFiliereInformation(filiereId);
        }

        public Teams GetTeamFiliereMappingByTeamId(int teamId, int filiereId)
        {
            return _service.GetTeamFiliereMappingByTeamId(teamId, filiereId);
        }

        public IEnumerable<Teams> GetTeamComposition()
        {
            return _service.GetTeamComposition();
        }

        public IEnumerable<Staff> GetTeamHeadDetails()
        {
            return _service.GetTeamHeadDetails();
        }

        public async Task<IEnumerable<TeamFilliere>> GetAggridTeamsFillieres(int filiereId)
        {
            var teams = _service.GetFiliereTeams(filiereId);
            return await _service.GetAggridTeamFillieres(teams.Select(s => s.TeamId).ToArray());
        }

        public async Task<bool> UpdateMappingAsync(string utCode, string team) => await _service.updateMapping(utCode, team);

        public IEnumerable<Teams> GetFiliereTeams(int filiereId)
        {
            return _service.GetFiliereTeams(filiereId);
        }

        public async Task<IEnumerable<TeamFilliere>> GetTeamsFillieres(int filiereId)
        {
            var teams = _service.GetFiliereTeams(filiereId);
            return await _service.GetTeamFillieres(teams.Select(s => s.TeamId).ToArray());
        }

        public string GetFiliereName(int filiereId)
        {
            return _service.GetFiliereName(filiereId);
        }

        public int GetStaffRoleId(string staffRoleName)
        {
            return _service.GetStaffRoleId(staffRoleName);
        }

        public int GetFiliereStaffCount(int filiereId, string dateFrom, string dateTo)
        {
            return _service.GetFiliereStaffCount(filiereId, dateFrom, dateTo);
        }

        public int GetFiliereTeamCount(int filiereId)
        {
            return _service.GetFiliereTeamCount(filiereId);
        }

        public int SaveTeams(Teams team)
        {
            if (team.TeamId == 0)
            {
                return _service.InsertTeams(team);
            }

            return _service.UpdateTeams(team);
        }

        public IEnumerable<FiliereHierarchy> GetFiliereHeirarchies()
        {
            return _service.GetFiliereHeirarchies();
        }

        public IEnumerable<FiliereHierarchy> GetFilieres()
        {
            return _service.GetFilieres();
        }

        public IEnumerable<FiliereHierarchy> GetFiliereHeirarchiesOrderById()
        {
            return _service.GetFiliereHeirarchiesOrderById();
        }

        public IEnumerable<StaffRole> GetStaffRoles()
        {
            return _service.GetStaffRoles();
        }

        public IEnumerable<Seniority> GetStaffSeniority()
        {
            return _service.GetStaffSeniority();
        }

        public IEnumerable<Location> GetStaffLocation()
        {
            return _service.GetStaffLocation();
        }

        public IEnumerable<Gender> GetStaffGender()
        {
            return _service.GetStaffGender();
        }

        public IEnumerable<StaffRoleConsoMapping> GetStaffRolesConsoMapping()
        {
            return _service.GetStaffRolesConsoMapping();
        }

        public IEnumerable<SourcingType> GetSourcingTypes()
        {
            return _service.GetSourcingTypes();
        }

        public IEnumerable<Seniority> GetSeniorities()
        {
            return _service.GetSeniorities();
        }

        public IEnumerable<RoleConso> GetRoleConsos()
        {
            return _service.GetRoleConsos();
        }

        public IEnumerable<ReasonOfTheHireRequest> GetReasonOfTheHireRequest()
        {
            return _service.GetReasonOfTheHireRequest();
        }

        public IEnumerable<HiringPriority> GetHiringPriority()
        {
            return _service.GetHiringPriority();
        }

        public IEnumerable<HiringPlannedChannel> GetHiringPlannedChannel()
        {
            return _service.GetHiringPlannedChannel();
        }

        public IEnumerable<ResourceStatus> GetResourceStatus()
        {
            return _service.GetResourceStatus();
        }

        public IEnumerable<ExternalPerformanceAssessment> GetExternalPerformanceAssessments()
        {
            return _service.GetExternalPerformanceAssessments();
        }

        public IEnumerable<OperatingMode> GetOperatingModes()
        {
            return _service.GetOperatingModes();
        }

        public IEnumerable<VintageDerogationValidation> GetVintageDerogationValidation()
        {
            return _service.GetVintageDerogationValidation();
        }

        public IEnumerable<RefrentialTable> GetGender()
        {
            return _service.GetREFGender();
        }

        public IEnumerable<RefrentialTable> GetLocation()
        {
            return _service.GetREFLocation();
        }

        public IEnumerable<Zoning> GetOfficePositions()
        {
            return _service.GetREFOfficePositions();
        }

        public IEnumerable<ContractType> GetContractTypes()
        {
            return _service.GetREFContractTypes();
        }

        public IEnumerable<RefrentialTable> GetBuildRunType()
        {
            return _service.GetBuildRun();
        }

        public IEnumerable<RestrictedColumns> GetSecurityColumn()
        {
            return _service.GetSecurityColumn();
        }

        public IEnumerable<HiringInitiative> GetHiringInitiative()
        {
            return _service.GetHiringInitiative();
        }

        public IEnumerable<LeversOfSavings> GetLeversOfSavings()
        {
            return _service.GetLeversOfSavings();
        }

        public IEnumerable<Building> GetBuildings()
        {
            return _service.GetBuildings();
        }

        public IEnumerable<FxRate> GetFxRates()
        {
            return _service.GetFxRates();
        }

        public IEnumerable<DailyRate> GetDailyRate()
        {
            return _service.GetDailyRate();
        }

        public IEnumerable<DailyRate> GetTbdDailyRate()
        {
            return _service.GetTbdDailyRate();
        }

        public IEnumerable<StaffMetadataView> GetStaffMetadataViews()
        {
            return _service.GetStaffMetadataViews();
        }

        public async Task<IEnumerable<SourcingTypeLocationSupplierMapping>> GetSourcingTypeLocationSupplierMapping()
        {
            return await _service.GetSourcingTypeLocationSupplierMapping();
        }

        public bool AddStaffTeamMapping(int teamId, string staffList)
        {
            var splitStaff = staffList.Split(';');
            int year = DateTime.Now.Year;
            var FirstDayOftheYear = new DateTime(year, 1, 1);

            foreach (var staff in splitStaff)
            {
                var staffTeamMapping = new StaffTeamMapping
                {
                    TeamId = teamId,
                    UTCode = staff,
                    FromDate = FirstDayOftheYear,
                    EndDate = null,
                    Allocation = 100,
                    ResourceCost = _service.GetStaffResourceCost(staff, year),
                    UBCode = _service.GetStaffUBCodeFromCrapull(staff),

                };

                _service.InsertStaffTeamMapping(staffTeamMapping);
            }

            return true;
        }

        public bool UpdateStaffTeamMapping(string utCode, int staffTeamMapId, int Allocation, string EndDate)
        {
            DateTime date;
            bool isParsed = DateTime.TryParse(EndDate, out date);
            if (isParsed)
            {
                return _service.UpdateStaffTeamMapping(utCode, staffTeamMapId, Allocation, date);
            }
            else
            {
                return _service.UpdateStaffTeamMapping(utCode, staffTeamMapId, Allocation, null);
            }
        }

        public bool AddStaffTeamMapping(int teamId, string staffList, int FiliereId)
        {
            var splitStaff = staffList.Split(';');
            int year = DateTime.Now.Year;
            var FirstDayOftheYear = new DateTime(year, 1, 1);

            foreach (var staff in splitStaff)
            {
                var staffTeamMapping = new StaffTeamMapping
                {
                    TeamId = teamId,
                    UTCode = staff,
                    FromDate = FirstDayOftheYear,
                    EndDate = null,
                    Allocation = 100,
                    ResourceCost = _service.GetStaffResourceCost(staff, year),
                    UBCode = _service.GetStaffUBCodeFromCrapull(staff),
                    FiliereId = FiliereId
                };

                _service.InsertStaffTeamMapping(staffTeamMapping);
            }

            return true;
        }

        public bool AddStaffTeamMapping(int teamId, string staffList, DateTime FromDate, DateTime EndDate, int allocation, int FiliereId)
        {
            var splitStaff = staffList.Split(';');
            int year = DateTime.Now.Year;

            foreach (var staff in splitStaff)
            {
                var staffTeamMapping = new StaffTeamMapping
                {
                    TeamId = teamId,
                    UTCode = staff,
                    FromDate = FromDate,
                    EndDate = EndDate,
                    Allocation = allocation,
                    ResourceCost = _service.GetStaffResourceCost(staff, year),
                    UBCode = _service.GetStaffUBCodeFromCrapull(staff),
                    FiliereId = FiliereId
                };

                _service.InsertStaffTeamMapping(staffTeamMapping);
            }

            return true;
        }

        public bool InsertStaffTeamMappingDetails(int teamId, string staffList, DateTime? FromDate, DateTime? EndDate, int allocation, int StaffRoleId, int FiliereId, int LocationId, int SourcingTypeId)
        {
            var splitStaff = staffList.Split(';');
            int year = DateTime.Now.Year;
            int inCurrentPosition = calculateDays(FromDate, EndDate);
            var workingIntervals = _service.GetWorkingIntervals();
            string InCurrentPositionFor = workingIntervals.FirstOrDefault(x => (inCurrentPosition > x.DaysFrom && inCurrentPosition <= x.DaysTo))?.Name;
            foreach (var staff in splitStaff)
            {
                var staffTeamMapping = new StaffTeamMapping
                {
                    TeamId = teamId,
                    UTCode = staff,
                    FromDate = FromDate,
                    EndDate = EndDate,
                    Allocation = allocation,
                    ResourceCost = _service.GetStaffResourceCost(staff, year),
                    UBCode = _service.GetStaffUBCodeFromCrapull(staff),
                    FiliereId = FiliereId,
                    LocationId=LocationId,
                    StaffRoleId = StaffRoleId,
                    SourcingTypeId = SourcingTypeId,
                    InCurrentPositionFor = InCurrentPositionFor
                };

                _service.InsertStaffTeamMappingDetails(staffTeamMapping);
            }

            return true;
        }

        public IEnumerable<TBDStaff> GetAllTBDStaffs()
        {
            return _service.GetAllTBDStaffs();
        }

        public async Task<IEnumerable<StaffTeamMapping>> GetStaffTeamMapping()
        {
            return await _service.GetStaffTeamMapping();
        }

        public async Task<IEnumerable<StaffTeamMapping>> GetExistingStaffTeamMapping(string utCode, int teamId)
        {
            return await _service.GetExistingStaffTeamMapping(utCode, teamId);
        }

        public bool UpdateDailyRateWithFxRate(decimal fxRate, string codeUT, int year)
        {
            return _service.UpdateDailyRateWithFxRate(fxRate, codeUT, year).GetAwaiter().GetResult();
        }

        public bool UpdateTbdDailyRateWithFxRate(decimal fxRate, int idRecrue)
        {
            return _service.UpdateTbdDailyRateWithFxRate(fxRate, idRecrue).GetAwaiter().GetResult();
        }

        public bool AddStaffTBDTeamMapping(int teamId, string staffTBDName, DateTime? startDate, DateTime? endDate, decimal resourceCost)
        {
            int tbdStaffID = 0;
            var tbdStaff = staffTBDName;
            var stagingtbd = _service.SearchTBDStaffAutoComplete(tbdStaff).FirstOrDefault();
            var isNumeric = int.TryParse(tbdStaff, out tbdStaffID);
            var staffTBDTeamMapping = new StaffTBDTeamMapping
            {
                TeamId = teamId,
                TbdStaffId = tbdStaffID,
                StaffTBDName = tbdStaff,
                FromDate = startDate,
                EndDate = endDate,
                ResourceCost = resourceCost
            };
            if (!isNumeric)
            {
                var tbd = _service.GetTBDStaffByName(tbdStaff);
                if (tbd.Any())
                {
                    staffTBDTeamMapping = _service.GetStaffTBDTeamMappingByTbdStaffId(tbd.FirstOrDefault().TBDStaffId).FirstOrDefault();
                    if (staffTBDTeamMapping != null)
                    {
                        staffTBDTeamMapping.TeamId = teamId;
                        staffTBDTeamMapping.FromDate = startDate;
                        staffTBDTeamMapping.EndDate = endDate;
                        _service.UpdateStaffTBDTeamMappingByTBDStaffCode(staffTBDTeamMapping);
                    }
                    else
                    {
                        staffTBDTeamMapping = new StaffTBDTeamMapping { TeamId = teamId, TbdStaffId = tbdStaffID, StaffTBDName = tbdStaff, ResourceCost = resourceCost };
                        if (stagingtbd != null)
                        {
                            staffTBDTeamMapping.FromDate = startDate ?? stagingtbd.FromDate;
                            staffTBDTeamMapping.EndDate = endDate ?? stagingtbd.EndDate;
                            staffTBDTeamMapping.UBCode = stagingtbd.UBCode;
                        }
                        staffTBDTeamMapping.TbdStaffId = tbd.Any() ? tbd.FirstOrDefault().TBDStaffId : 0;
                        _service.InsertStaffTBDTeamMapping(staffTBDTeamMapping);
                    }
                }
                else
                {
                    var location = string.Empty;
                    if (stagingtbd != null)
                    {
                        location = stagingtbd.Location;
                        staffTBDTeamMapping.FromDate = startDate ?? stagingtbd.FromDate;
                        staffTBDTeamMapping.EndDate = endDate ?? stagingtbd.EndDate;
                        staffTBDTeamMapping.UBCode = stagingtbd.UBCode;
                    }
                    _service.InsertTBDStaff(tbdStaff, location, stagingtbd?.Comment);
                    var tbdname = _service.GetTBDStaffByName(tbdStaff);
                    staffTBDTeamMapping.TbdStaffId = tbdname.Any() ? tbdname.FirstOrDefault().TBDStaffId : 0;
                    _service.InsertStaffTBDTeamMapping(staffTBDTeamMapping);
                }
            }
            else
            {
                var tbd = _service.GetTBDStaffById(tbdStaffID);
                if (tbd.Any())
                {
                    var crapull = _service.GetCrapullDate(tbd.FirstOrDefault().FullName).FirstOrDefault();
                    if (crapull != null)
                    {
                        int.TryParse(crapull.YearOfCharge, out int endyear);
                        int.TryParse(crapull.MaxMonth, out int endMonth);
                        var endday = DateTime.DaysInMonth(endyear, endMonth);
                        staffTBDTeamMapping.FromDate = startDate ?? DateTime.Parse($"{crapull.MinMonth}/1/{crapull.YearOfCharge}");
                        staffTBDTeamMapping.EndDate = endDate ?? DateTime.Parse($"{crapull.MaxMonth}/{endday}/{crapull.YearOfCharge}");
                        staffTBDTeamMapping.UBCode = stagingtbd.UBCode;
                    }
                }
                _service.InsertStaffTBDTeamMapping(staffTBDTeamMapping);
            }
            return true;
        }

        public bool RemoveStaffTeamMapping(int staffTeamMapId)
        {
            return _service.RemoveStaffTeamMapping(staffTeamMapId);
        }

        public bool RemoveStaffTBD(int staffTBDCode)
        {

            return _service.RemoveStaffTBD(staffTBDCode);
        }

        public bool RemoveStaffTBDTeamMapping(int teamId, int staffTBDCode)
        {
            var map = new StaffTBDTeamMapping
            {
                TeamId = teamId,
                StaffTBDCode = staffTBDCode
            };

            return _service.RemoveStaffTBDTeamMapping(map);
        }

        public bool UpdateStaffTeamMapping(int staffTeamMapId, int teamId, string utCode, int? StaffRoleId, string Location, string Seniority, string SourcingType, DateTime? fromDate, DateTime? endDate, int allocation,
            bool shadows, string inCurrentPositionFor, string gender)
        {
            var map = new StaffTeamMapping
            {
                StaffTeamMapId = staffTeamMapId,
                TeamId = teamId,
                UTCode = utCode,
                StaffRoleId = StaffRoleId,
                Location = Location,
                Seniority = Seniority,
                SourcingType = SourcingType,
                FromDate = fromDate,
                EndDate = endDate,
                Allocation = allocation,
                Shadows = shadows,
                InCurrentPositionFor = inCurrentPositionFor,
                Gender = gender
            };
            var res = _service.UpdateStaffTeamMapping(map);
            return res;
        }

        public bool UpdateStaff(StaffManagementVM staffManagementVM)
        {
            var res = _service.UpdateStaff(staffManagementVM);
            return res;
        }

        public bool UpdateStaffTBD(StaffManagementVM staffManagementVM)
        {
            return _service.UpdateStaffTBD(staffManagementVM);
        }

        public bool InsertStaffAuditRecord(StaffManagementVM staffManagementVM)
        {
            return _service.InsertStaffAuditRecord(staffManagementVM);
        }

        public bool SaveStaffAuditLog(AuditLog auditLog)
        {
            return _service.SaveStaffAuditLog(auditLog);
        }

        public bool InsertTBDStaffAuditRecord(StaffManagementVM staffManagementVM)
        {
            return _service.InsertTBDStaffAuditRecord(staffManagementVM);
        }

        public bool UpdateStaffTBDTeamMapping(int teamId, int staffTBDCode, string staffTBDName, int? StaffRoleId, string Location, string Seniority, string SourcingType, DateTime? fromDate, DateTime? endDate, int allocation,
            bool shadows, string gender)
        {
            var map = new StaffTBDTeamMapping
            {
                TeamId = teamId,
                StaffTBDCode = staffTBDCode,
                StaffTBDName = staffTBDName,
                StaffRoleId = StaffRoleId,
                Location = Location,
                Seniority = Seniority,
                SourcingType = SourcingType,
                FromDate = fromDate,
                EndDate = endDate,
                Allocation = allocation,
                Shadows = shadows,
                Gender = gender
            };

            return _service.UpdateStaffTBDTeamMapping(map);
        }

        public bool InsertStaffTeamMappingUpdateAuditRecord(int staffTeamMapId, int teamId, string utCode, int? StaffRoleId, DateTime? fromDate, DateTime? endDate, int allocation,
            bool shadows, decimal resourceCost, string screenName, string tableName, string modifiedBy)
        {
            var map = new StaffTeamMapping
            {
                StaffTeamMapId = staffTeamMapId,
                TeamId = teamId,
                UTCode = utCode,
                StaffRoleId = StaffRoleId,
                FromDate = fromDate,
                EndDate = endDate,
                Allocation = allocation,
                ResourceCost = resourceCost,
                Shadows = shadows,
                ScreenName = screenName,
                TableName = tableName,
                ModifiedBy = modifiedBy
            };

            return _service.InsertStaffTeamMappingUpdateAuditRecord(map);
        }

        public bool InsertStaffTBDTeamMappingUpdateAuditRecord(int teamId, int staffTBDCode, string staffTBDName, int? StaffRoleId, DateTime? fromDate, DateTime? endDate, int allocation,
            bool shadows, decimal resourceCost, string screenName, string tableName, string modifiedBy)
        {
            var map = new StaffTBDTeamMapping
            {
                TeamId = teamId,
                StaffTBDCode = staffTBDCode,
                StaffTBDName = staffTBDName,
                StaffRoleId = StaffRoleId,
                FromDate = fromDate,
                EndDate = endDate,
                Allocation = allocation,
                ResourceCost = resourceCost,
                Shadows = shadows,
                ScreenName = screenName,
                TableName = tableName,
                ModifiedBy = modifiedBy
            };

            return _service.InsertStaffTBDTeamMappingUpdateAuditRecord(map);
        }

        public bool InsertTeamFiliereMappingUpdateAuditRecord(string filiereId, string auditData, string screenName, string tableName, string modifiedBy)
        {
            var map = new StaffTBDTeamMapping
            {
                FiliereId = filiereId,
                AuditData = auditData,
                ScreenName = screenName,
                TableName = tableName,
                ModifiedBy = modifiedBy
            };

            return _service.InsertTeamFiliereMappingUpdateAuditRecord(map);
        }

        public bool InsertFiliereHierarchyUpdateAuditRecord(string FiliereHierarchyId, string auditData, string screenName, string tableName, string modifiedBy)
        {
            var map = new StaffTBDTeamMapping
            {
                FiliereHierarchyId = FiliereHierarchyId,
                AuditData = auditData,
                ScreenName = screenName,
                TableName = tableName,
                ModifiedBy = modifiedBy
            };

            return _service.InsertFiliereHierarchyUpdateAuditRecord(map);
        }

        public IEnumerable<Skill> GetSkills()
        {
            return _service.GetSkills();
        }

        public async Task<IEnumerable<StaffParallelAssignment>> GetStaffsWithParallelAssignments()
        {
            return await _service.GetStaffsWithParallelAssignments();
        }

        public async Task<IEnumerable<StaffReport>> GetStaffReport(string reportYear, string filiereId)
        {
            return await _service.GetStaffReport(reportYear, filiereId);
        }

        public async Task<IEnumerable<StaffReport>> GetStaffReport(string reportYear, string filiereId, string UTCode)
        {
            return await _service.GetStaffReport(reportYear, filiereId, UTCode);
        }

        public async Task<IEnumerable<StaffReport>> GetStaffReportCrapullReco(string reportYear, string filiereId)
        {
            return await _service.GetStaffReportCrapullReco(reportYear, filiereId);
        }

        public async Task<IEnumerable<StaffReport>> GetStaffReportCrapullReco(string reportYear, string filiereId, string UTCode)
        {
            return await _service.GetStaffReportCrapullReco(reportYear, filiereId, UTCode);
        }

        public async Task<IEnumerable<CrapullStaffReport>> GetCrapullStaffReport(string reportYear, string filiereId)
        {
            return await _service.GetCrapullStaffReport(reportYear, filiereId);
        }

        public async Task<IEnumerable<CrapullStaffReport>> GetCrapullStaffReport(string reportYear, string filiereId, string UTCode)
        {
            return await _service.GetCrapullStaffReport(reportYear, filiereId, UTCode);
        }

        public async Task<IEnumerable<CrapullStaffReport>> GetStaffStatusForAllMonthsCounts(string reportYear, int month)
        {
            return await _service.GetStaffStatusForAllMonthsCounts(reportYear, month);
        }

        public async Task<IEnumerable<CrapullStaffReport>> GetCrapullStaffReportDups(string reportYear, string filiereId)
        {
            return await _service.GetCrapullStaffReportDups(reportYear, filiereId);
        }

        public async Task<IEnumerable<StaffControl>> GetStaffControl(string mangerUt, string filierId)
        {
            return await _service.GetStaffControl(mangerUt, filierId);
        }

        public async Task<IEnumerable<StaffDetails>> GetStaffDetails(string UtCode)
        {
            return await _service.GetStaffMappingDetails(UtCode);
        }

        public async Task<IEnumerable<TeamControl>> GetUnmappedTeams()
        {
            return await _service.GetUnmappedTeams();
        }

        public IEnumerable<StaffManagement> GetStaffTable(string teamID, string dateFrom, string dateTo)
        {
            return _service.GetStaffTable(teamID, dateFrom, dateTo);
        }

        public IEnumerable<StaffManagement> GetAuditTable(string dateFrom, string dateTo)
        {
            return _service.GetAuditTable(dateFrom, dateTo);
        }

        public IEnumerable<Staff> GetFiliereStaffTable(int filiereId)
        {
            return _service.GetFiliereStaffTable(filiereId);
        }

        public async Task<IEnumerable<Staff>> GetFiliereStaffTable(int filiereId, string loggedIn)
        {
            return await _service.FetchFilierStaffTable(filiereId, loggedIn);
        }

        public bool SaveFillierTeamMapping(int filliereId, string teams)
        {
            var isSucess = true;
            isSucess &= _service.RemoveTeamFromFilliereTeamMapping(teams);
            isSucess &= _service.SaveFilliereTeamMapping(filliereId, teams);
            return isSucess;
        }

        public IEnumerable<Staff> SearchUnmappedStaffAutoComplete(string search)
        {
            return _service.SearchUnmappedStaffAutoComplete(search);
        }

        public IEnumerable<Teams> SearchTeamsAutoComplete(string search)
        {
            return _service.SearchTeamAutoComplete(search);
        }

        public IEnumerable<Staff> SearchStaffAutoComplete(string search)
        {
            return _service.SearchStaffAutoComplete(search);
        }

        public IEnumerable<TBDStaff> SearchTBDStaffAutoComplete(string search)
        {
            return _service.SearchTBDStaffAutoComplete(search);
        }

        public IEnumerable<Staff> LoadStaffAutoComplete(List<string> searchValues)
        {
            return _service.LoadStaffAutoComplete(searchValues);
        }

        public IEnumerable<ODataLink> GetODataLink()
        {
            return _service.GetODataLink();
        }

        public StaffTeamMapping GetStaffMapping(string utCode)
        {
            return _service.GetStaffMapping(utCode);
        }

        public int CheckStaffMapping(string utCode)
        {
            return _service.CheckStaffMapping(utCode);
        }

        public bool SyncStaffTeamMappingFromCrapull(StaffTeamMapping mapping)
        {
            return _service.SyncStaffTeamMappingFromCrapull(mapping);
        }

        public bool SyncTBDStaffTeamMappingFromCrapull(StaffTeamMapping mapping)
        {
            return _service.SyncTBDStaffTeamMappingFromCrapull(mapping);
        }

        public IEnumerable<Hre> GetHre()
        {
            return _service.GetHre();
        }



        public IEnumerable<ContractTermStatus> GetContractTermStatus()
        {
            return _service.GetContractTermStatus();
        }

        public IEnumerable<EndOfContractStatus> GetEndOfContractStatuses()
        {
            return _service.GetEndOfContractStatuses();
        }

        public IEnumerable<LocationAndSourcingTypeMapping> GetLocationAndSourcingTypeMapping()
        {
            return _service.GetLocationAndSourcingTypeMapping();
        }

        public IEnumerable<StaffTeamMapping> GetStaffMappings(string utCode)
        {
            return _service.GetStaffMappings(utCode);
        }

        #region TBDStaffMapping

        public IEnumerable<NewStaff> GetAllStaffs()
        {
            return _service.GetAllStaffs();
        }

        public IEnumerable<TBDStaff> GetTBDStaff()
        {
            return _service.GetTBDStaff();
        }

        public IEnumerable<TBDStaff> GetTbdByStaffName(string fullName)
        {
            return _service.GetTbdByStaffName(fullName);
        }

        public int GetStaffTeamMapId(string utCode)
        {
            return _service.GetStaffTeamMapId(utCode);
        }

        public bool AddStaffTBDTeamMappingCrapullVsGiraffe(StaffTBDTeamMapping newStaffTBDTeamMapping)
        {
            int tbdStaffID = 0;
            var tbdStaffName = newStaffTBDTeamMapping.StaffTBDName;
            var stagingtbd = _service.SearchTBDStaffAutoComplete(tbdStaffName).FirstOrDefault();
            var isNumeric = int.TryParse(tbdStaffName, out tbdStaffID);
            var staffTBDTeamMapping = new StaffTBDTeamMapping
            {
                TeamId = newStaffTBDTeamMapping.TeamId,
                TbdStaffId = tbdStaffID,
                StaffTBDName = newStaffTBDTeamMapping.StaffTBDName,
                FromDate = newStaffTBDTeamMapping.FromDate,
                EndDate = newStaffTBDTeamMapping.EndDate,
                ResourceCost = newStaffTBDTeamMapping.ResourceCost,
                Location = newStaffTBDTeamMapping.Location,
                Seniority = newStaffTBDTeamMapping.Seniority,
                SourcingTypeId = newStaffTBDTeamMapping.SourcingTypeId,
                StaffRoleId = newStaffTBDTeamMapping.StaffRoleId,
                Allocation = newStaffTBDTeamMapping.Allocation,
                Gender = newStaffTBDTeamMapping.Gender,
                GenderId = newStaffTBDTeamMapping.GenderId,
                TBDStaff = newStaffTBDTeamMapping.TBDStaff,
                UBCode = newStaffTBDTeamMapping.UBCode,
                FiliereId = newStaffTBDTeamMapping.FiliereId
            };

            if (!isNumeric)
            {
                var tbd = _service.GetTBDStaffByName(tbdStaffName);
                TBDStaff tbdStaff = new TBDStaff()
                {
                    TBDStaffName = tbdStaffName,
                    Comment = stagingtbd?.Comment,
                    Seniority = staffTBDTeamMapping.Seniority,
                    Gender = staffTBDTeamMapping.Gender,
                    GenderId = staffTBDTeamMapping.GenderId,
                    HreId = staffTBDTeamMapping.TBDStaff.HreId,
                    NewResourceID = staffTBDTeamMapping.TBDStaff.NewResourceID,
                    HiringPriority = staffTBDTeamMapping.TBDStaff.HiringPriority,
                    HiringPlannedChannel = staffTBDTeamMapping.TBDStaff.HiringPlannedChannel,
                    ReasonOfTheHireRequest = staffTBDTeamMapping.TBDStaff.ReasonOfTheHireRequest,
                    HiringInitiative = staffTBDTeamMapping.TBDStaff.HiringInitiative
                };

                if (tbd.Any())
                {
                    tbdStaff.TBDStaffId = tbd.FirstOrDefault().TBDStaffId;
                    var existingStaffTBDTeamMapping = _service.GetStaffTBDTeamMappingByTbdStaffId(tbd.FirstOrDefault().TBDStaffId).FirstOrDefault();
                    if (existingStaffTBDTeamMapping != null)
                    {
                        existingStaffTBDTeamMapping.TeamId = staffTBDTeamMapping.TeamId;
                        existingStaffTBDTeamMapping.FromDate = staffTBDTeamMapping.FromDate;
                        existingStaffTBDTeamMapping.EndDate = staffTBDTeamMapping.EndDate;
                        existingStaffTBDTeamMapping.ResourceCost = staffTBDTeamMapping.ResourceCost;
                        existingStaffTBDTeamMapping.Location = staffTBDTeamMapping.Location;
                        existingStaffTBDTeamMapping.SourcingTypeId = staffTBDTeamMapping.SourcingTypeId;
                        existingStaffTBDTeamMapping.StaffRoleId = staffTBDTeamMapping.StaffRoleId;
                        existingStaffTBDTeamMapping.Allocation = staffTBDTeamMapping.Allocation;
                        existingStaffTBDTeamMapping.GenderId = staffTBDTeamMapping.GenderId;
                        existingStaffTBDTeamMapping.FiliereId = staffTBDTeamMapping.FiliereId;
                        _service.UpdateStaffTBDTeamMappingByTBDStaffCodeCrapullVsGiraffe(existingStaffTBDTeamMapping);
                    }
                    else
                    {
                        if (stagingtbd != null)
                        {
                            staffTBDTeamMapping.FromDate = staffTBDTeamMapping.FromDate ?? stagingtbd.FromDate;
                            staffTBDTeamMapping.EndDate = staffTBDTeamMapping.EndDate ?? stagingtbd.EndDate;
                            staffTBDTeamMapping.UBCode = stagingtbd.UBCode;
                        }

                        staffTBDTeamMapping.TbdStaffId = tbd.Any() ? tbd.FirstOrDefault().TBDStaffId : 0;
                        _service.InsertStaffTBDTeamMappingCrapullVsGiraffe(staffTBDTeamMapping);
                    }

                    _service.UpdateTBDStaffCrapullVsGiraffe(tbdStaff);
                }
                else
                {
                    // TBD not in loris staff or stafftbdteammapping
                    if (stagingtbd != null)
                    {
                        staffTBDTeamMapping.FromDate = newStaffTBDTeamMapping.FromDate ?? stagingtbd.FromDate;
                        staffTBDTeamMapping.EndDate = newStaffTBDTeamMapping.EndDate ?? stagingtbd.EndDate;
                        staffTBDTeamMapping.UBCode = stagingtbd.UBCode;
                    }

                    _service.InsertTBDStaffCrapullVsGiraffe(tbdStaff);
                    var tbdname = _service.GetTBDStaffByName(tbdStaffName);
                    staffTBDTeamMapping.TbdStaffId = tbdname.Any() ? tbdname.FirstOrDefault().TBDStaffId : 0;
                    _service.InsertStaffTBDTeamMapping(staffTBDTeamMapping);
                }
            }
            else
            {
                return false;
            }

            return true;
        }

        public bool AddNewStaffTeamMapping(StaffTeamMapping latestStaffTeamMapping)
        {
            var staffTeamMapping = new StaffTeamMapping
            {
                TeamId = latestStaffTeamMapping.TeamId,
                UTCode = latestStaffTeamMapping.UTCode,
                FullName = latestStaffTeamMapping.FullName,
                FromDate = latestStaffTeamMapping.FromDate,
                EndDate = latestStaffTeamMapping.EndDate,
                ResourceCost = latestStaffTeamMapping.ResourceCost,
                UBCode = latestStaffTeamMapping.UBCode,
                Location = latestStaffTeamMapping.Location,
                Seniority = latestStaffTeamMapping.Seniority,
                StaffRoleId = latestStaffTeamMapping.StaffRoleId,
                SourcingTypeId = latestStaffTeamMapping.SourcingTypeId,
                Allocation = latestStaffTeamMapping.Allocation,
                TBDStaffId = latestStaffTeamMapping.TBDStaffId,
                FiliereId = latestStaffTeamMapping.FiliereId,
                Staff = new Staff()
                {
                    HreId = latestStaffTeamMapping.Staff.HreId,
                    HiringPriority = latestStaffTeamMapping.Staff.HiringPriority,
                    HiringPlannedChannel = latestStaffTeamMapping.Staff.HiringPlannedChannel,
                    ReasonOfTheHireRequest = latestStaffTeamMapping.Staff.ReasonOfTheHireRequest,
                    HiringInitiative = latestStaffTeamMapping.Staff.HiringInitiative,
                    NewResourceID = latestStaffTeamMapping.Staff.NewResourceID,
                    Gender = latestStaffTeamMapping.Staff.Gender,
                    GenderId = latestStaffTeamMapping.Staff.GenderId
                }
            };
            int inCurrentPosition = calculateDays(staffTeamMapping.FromDate, staffTeamMapping.EndDate);
            var workingIntervals = _service.GetWorkingIntervals();
            string InCurrentPositionFor = workingIntervals.FirstOrDefault(x => (inCurrentPosition > x.DaysFrom && inCurrentPosition <= x.DaysTo))?.Name;
            staffTeamMapping.InCurrentPositionFor = InCurrentPositionFor;
            var activeStaff = _service.SearchLorisStaff(staffTeamMapping.UTCode).FirstOrDefault();

            if (activeStaff != null)
            {
                _service.InsertStaffTeamMappingCrapullvsGiraffe(staffTeamMapping);
                staffTeamMapping.StaffTeamMapId = _service.GetStaffTeamMapId(staffTeamMapping.UTCode);
                _service.DeleteTbdCrapullvsGiraffe(staffTeamMapping.TBDStaffId);
            }

            return true;
        }

        public bool DeleteTBDStaffById(int tbdStaffId)
        {
            return _service.DeleteTBDStaffById(tbdStaffId).GetAwaiter().GetResult();
        }

        public bool UpdateTBDStaffComment(int tbdStaffId, string comment)
        {
            return _service.UpdateTBDStaffComment(tbdStaffId, comment).GetAwaiter().GetResult();
        }

        public bool UpdateStagingTBDStaffComment(int tbdStaffId, string comment)
        {
            return _service.UpdateStagingTBDStaffComment(tbdStaffId, comment).GetAwaiter().GetResult();
        }

        #endregion

        #region DataRefreshAdministrationLogs

        public int SaveDataRefreshLogs(DataRefreshAdministrationLogs data)
        {
            if (data.Id > 0)
            {
                data.ModifiedDate = DateTime.Now;
                _service.UpdateDataRefreshLogs(data);
                return data.Id;
            }
            else
            {
                data.CreatedDate = DateTime.Now;
                data.ModifiedDate = DateTime.Now;
                _service.InsertDataRefreshLogs(data);
                return GetDataRefreshLogs(data.Type).Id;
            }
        }

        public async Task<IEnumerable<DataRefreshAdministrationLogs>> GetDianaRefreshLogs(string status)
        {
            return await _service.GetDianaRefreshLogs(status);
        }

        public DataRefreshAdministrationLogs GetDataRefreshLogs(DataRefreshType type)
        {
            return _service.GetDataRefreshLogs(type);
        }

        public IEnumerable<DataRefreshTimings> GetDataRefreshTimings()
        {
            return _service.GetDataRefreshTimings();
        }

        #endregion

        #region Staff Positions

        public int calculateDays(DateTime? fromDate, DateTime? endDate)
        {
            DateTime todayDate = DateTime.Now;
            if (fromDate == null)
                return 0;
            if (endDate == null || endDate > todayDate)
            {
                return (todayDate - fromDate).Value.Days;
            }
            else if (endDate < todayDate)
            {
                return (endDate - fromDate).Value.Days;
            }
            return 0;
        }

        public IEnumerable<WorkingInterval> GetWorkingIntervals()
        {
            return _service.GetWorkingIntervals();
        }

        #endregion
        public IEnumerable<GiraffeUser> GetUserList(string UTCode)
        {
            return _service.GetUserList(UTCode);
        }

        #region Pending Staff
        public async Task<IEnumerable<StaffPendingModel>> GetStagingStaffList(string utCode)
        {
            return await _service.GetStagingStaffList(utCode);
        }

        public bool UpdatePendingStaffDetails(StaffTeamMapping latestStaffTeamMapping, string createdBy)
        {
            var staffTeamMapping = new StaffTeamMapping
            {
                TeamId = latestStaffTeamMapping.TeamId,
                StaffId = latestStaffTeamMapping.StaffId,
                UTCode = latestStaffTeamMapping.UTCode,
                FullName = latestStaffTeamMapping.FullName,
                FromDate = latestStaffTeamMapping.FromDate,
                EndDate = latestStaffTeamMapping.EndDate,
                UBCode = latestStaffTeamMapping.UBCode,
                LocationId = latestStaffTeamMapping.LocationId,
                SeniorityId = latestStaffTeamMapping.SeniorityId,
                StaffRoleId = latestStaffTeamMapping.StaffRoleId,
                SourcingTypeId = latestStaffTeamMapping.SourcingTypeId,
                Allocation = latestStaffTeamMapping.Allocation,
                TBDStaffId = latestStaffTeamMapping.TBDStaffId,
                StaffTeamMapId = latestStaffTeamMapping.StaffTeamMapId,
                FiliereId = latestStaffTeamMapping.FiliereId,
                Staff = new Staff()
                {
                    HreId = latestStaffTeamMapping.Staff.HreId,
                    HiringPriorityId = latestStaffTeamMapping.Staff.HiringPriorityId,
                    HiringPlannedChannelId = latestStaffTeamMapping.Staff.HiringPlannedChannelId,
                    ReasonOfTheHireRequestId = latestStaffTeamMapping.Staff.ReasonOfTheHireRequestId,
                    HiringInitiativeId = latestStaffTeamMapping.Staff.HiringInitiativeId,
                    NewResourceID = latestStaffTeamMapping.Staff.NewResourceID,
                    Gender = latestStaffTeamMapping.Staff.Gender,
                    GenderId = latestStaffTeamMapping.Staff.GenderId
                }
            };
            int inCurrentPosition = calculateDays(staffTeamMapping.FromDate, staffTeamMapping.EndDate);
            var workingIntervals = _service.GetWorkingIntervals();
            string InCurrentPositionFor = workingIntervals.FirstOrDefault(x => (inCurrentPosition > x.DaysFrom && inCurrentPosition <= x.DaysTo))?.Name;
            staffTeamMapping.InCurrentPositionFor = InCurrentPositionFor;
            var activeStaff = _service.SearchLorisStaff(staffTeamMapping.UTCode).FirstOrDefault();

            if (activeStaff != null)
            {
                _service.UpdateStaffTeamMappingPending(staffTeamMapping, createdBy);
                //staffTeamMapping.StaffTeamMapId = _service.GetStaffTeamMapId(staffTeamMapping.UTCode);
                _service.DeleteTbdCrapullvsGiraffe(staffTeamMapping.TBDStaffId);
            }

            return true;
        }
        public bool CheckUserRWAccess(string utCode)
        {
            return _service.FetchUserAccess(utCode);
        }
        public async Task<IEnumerable<PendingActionsMail>> GetPendingActionsMails()
        {
            return await _service.GetPendingActionsMails();
        }
        public bool CleanStaffDianaStaging(string utCode)
        {
            return _service.CleanDianaStagingData(utCode);
        }
        public async Task<IEnumerable<StaffDianaTeamData>> GetStagingDianaData()
        {
            return await _service.GetStaffDianaTeamData();
        }
        
        public int InsertStaffPendingAction(string utCode)
        {
            return _service.InsertStaffPendingAction(utCode);
        }
        public bool UpsertPendingTBDStaffDetails(StaffTBDTeamMapping staffTBDTeamMapping, string crapullTeam, int Id)
        {
            int tbdStaffID = 0;
            var tbdStaffName = staffTBDTeamMapping.StaffTBDName;
            var isNumeric = int.TryParse(tbdStaffName, out tbdStaffID);
            if (!isNumeric)
            {
                var tbd = _service.GetTBDStaffByName(tbdStaffName);
                if (tbd.Any())
                {
                    staffTBDTeamMapping.TBDStaff.TBDStaffId = tbd.FirstOrDefault().TBDStaffId;
                    var existingStaffTBDTeamMapping = _service.GetStaffTBDTeamMappingByTbdStaffId(tbd.FirstOrDefault().TBDStaffId).FirstOrDefault();
                    if (existingStaffTBDTeamMapping != null)
                    {
                        _service.UpdatePendingStaffTBDTeamMapping(staffTBDTeamMapping);
                    }
                    else
                    {
                        staffTBDTeamMapping.TbdStaffId = tbd.FirstOrDefault().TBDStaffId;
                        staffTBDTeamMapping.TeamId = staffTBDTeamMapping.TeamId == null ? 0 : staffTBDTeamMapping.TeamId;
                        _service.InsertPendingTBDTeamMapping(staffTBDTeamMapping);
                    }

                    _service.UpdatePendingTBD(staffTBDTeamMapping.TBDStaff, Id);
                    //update also manual TBD isMapped = 1
                }
                else
                {
                    _service.InsertPendingStaffTBDTeamMapping(staffTBDTeamMapping, Id);
                    //update also manual TBD isMapped = 1
                }
            }
            else
            {
                return false;
            }
            return true;
        }
        public async Task<int> GetTBDPendingActionCount()
        {
            return await _service.GetTBDStaffActionCount();
        }
        public int InsertStaffDianaStaging(string utCode, int orgUnitNo)
        {
            return _service.InsertStaffDianaStagingDetails(utCode, orgUnitNo);
        }
        public List<MobilityEmail> GetMobilityEmails(string UTList)
        {
            return _service.GetMobilityEmails(UTList);
        }

        public async Task<List<VintageEmailList>> GetVintageStaff()
        {
            return await _service.GetVintageStaff();
        }

        public async Task<List<VintageManager>> GetVintageManagers()
        {
            return await _service.GetVintageManagers();
        }

        public String GetFilierePath(int filiereId)
        {
            return _service.GetFilierePath(filiereId);
        }

        public bool SaveStaffHistory(string utCode, int teamId, int filiereId,  int? StaffRoleId, int Location, int Seniority, int SourcingType, DateTime? fromDate, DateTime? endDate, int allocation,
            string modifiedBy)
        {
            var map = new StaffTeamMapping
            {
                UTCode = utCode,
                TeamId = teamId,
                FiliereId = filiereId,
                Allocation = allocation,
                LocationId = Location,
                SourcingTypeId = SourcingType,
                StaffRoleId = StaffRoleId,
                SeniorityId = Seniority,
                FromDate = fromDate,
                EndDate = endDate,
                ModifiedBy = modifiedBy
            };
            return _service.SaveStaffHistoryDetails(map);
        }
        public bool UnmapStaff(string utCode)
        {
            return _service.RemoveStaffData(utCode);
        }
        public bool RemapStaff(string utCode)
        {
            return _service.RemapStaffData(utCode);
        }
        public StaffDianaTeamData GetStaffFromStaging(string utCode)
        {
            return _service.GetStaffDetails(utCode);
        }
        public async Task<IEnumerable<StaffTbdOnBoarding>> GetStaffTBDOnBoarding()
        {
            return await _service.GetStaffTBDOnBoardingList();
        }
        public int SaveManualTbdOnBoarding(StaffTbdOnBoarding tbd)
        {
            return _service.SaveTbdOnBoarding(tbd);
        }
        public bool UpdateManualTbdOnBoarding(StaffTbdOnBoarding tbd)
        {
            return _service.UpdateTbdOnBoarding(tbd);
        }
        public bool DeleteTbdOnBoarding(string tbdName, int Id)
        {
            return _service.DeletTbdOnBoarding(tbdName, Id);
        }

        public IEnumerable<TBDStaff> GetCrapullAndManualTBD()
        {
            return _service.GetCrapullAndManualTBD();
        }
        public StaffTbdOnBoarding GetManualTBDByName(string tbdName)
        {
            return _service.GetTBDByName(tbdName);
        }
        #endregion

        #region Data Refresh Job
        public IEnumerable<Staff> GetAllStaffData()
        {
            return _service.GetAllStaffList();
        }
        public bool AnonymizeStaff(string utcode)
        {
            return _service.AnonymizeStaffName(utcode);
        }
        public bool CleanStaffData(string utcode)
        {
            return _service.CleanStaffData(utcode);
        }
        #endregion
    }
}
