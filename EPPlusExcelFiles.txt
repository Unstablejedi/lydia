using Giraffe.ExcelFile.Interfaces;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Giraffe.ExcelFile
{
    public class EPPlusExcelFile : IExcelFileEgine
    {
        public Task<IEnumerable<T>> Read<T>(byte[] bytes, string worksheetName) where T : new()
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (MemoryStream ms = new MemoryStream(bytes))
            using (ExcelPackage package = new ExcelPackage(ms))
            {
                var workbook = package.Workbook.Worksheets[worksheetName];
                IEnumerable<T> data = workbook.ConvertSheetToObjects<T>().ToList();
                return Task.FromResult(data);
            }
        }

        public List<string> GetColumns(byte[] bytes, string worksheetName) 
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (MemoryStream ms = new MemoryStream(bytes))
            using (ExcelPackage package = new ExcelPackage(ms))
            {
                var workbook = package.Workbook.Worksheets[worksheetName];

                List<string> columnNames = new List<string>();
                if (workbook==null) {
                    return columnNames;
                }
                
                foreach (var startRowCell in workbook.Cells[workbook.Dimension.Start.Row, workbook.Dimension.Start.Column, 1, workbook.Dimension.End.Column])
                    columnNames.Add(startRowCell.Text);
               
                return columnNames;
            }
        }

        public bool IsWorksheetExist(byte[] bytes, string worksheetName)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (MemoryStream ms = new MemoryStream(bytes))
            using (ExcelPackage package = new ExcelPackage(ms))
            {
                var workbook = package.Workbook.Worksheets[worksheetName];

                return workbook != null;
            }
        }

        public bool IsDateAllValid<T>(byte[] bytes, string worksheetName) where T : new()
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (MemoryStream ms = new MemoryStream(bytes))
            using (ExcelPackage package = new ExcelPackage(ms))
            {
                var workbook = package.Workbook.Worksheets[worksheetName];

                return workbook.ValidateDates<T>();
            }
        }

        public Task<MemoryStream> GetBytes<T>(IEnumerable<T> data) where T:new()
        {
            var stream = new MemoryStream();
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (var package = new ExcelPackage(stream))
            {
                var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                workSheet.Cells.LoadFromCollection(data, true);
                package.Save();
            }

            stream.Position = 0;
            return Task.FromResult(stream);
        }
    }
}
