using Giraffe.Common;
using Giraffe.Crapull.Configurations;
using Giraffe.Crapull.Interfaces;
using Giraffe.DataAccess.Interfaces;
using Giraffe.Service;
using Giraffe.Service.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Diagnostics;
using System.Threading.Tasks;

namespace Giraffe.Crapull
{
    class CrapullDataRefreshImplementation : ICrapullDataRefresh
    {
        private readonly BusinessService _service;
        private readonly string _connectionString;
        private readonly CrapullConfiguration _crapullConfiguration;
        private readonly ICrapullDataAccess _crapullDataAccess;
        private readonly ILorisStaffDataAccess _lorisStaffDataAccess;
        private readonly ITBDStaffDataAccess _tbdStaffDataAccess;

        public CrapullDataRefreshImplementation(IOptions<CrapullConfiguration> option, IConfiguration configuration, ICrapullDataAccess crapullDataAccess, ILorisStaffDataAccess lorisStaffDataAccess, ITBDStaffDataAccess tbdStaffDataAccess)
        {
            _crapullConfiguration = option.Value;
            _connectionString = configuration.GetConnectionString(Constants.GIRAFFE_CONNECTION_STRING_NAME);
            _service = new BusinessService(configuration.GetConnectionString(Constants.GIRAFFE_CONNECTION_STRING_NAME));
            _crapullDataAccess = crapullDataAccess;
            _lorisStaffDataAccess = lorisStaffDataAccess;
            _tbdStaffDataAccess = tbdStaffDataAccess;
        }

        public async Task<bool> RefreshAsync()
        {
            decimal fxRateGBP = 1;
            decimal fxRateUS = 1;
            decimal fxRateGBPPrevYear = 1;
            decimal fxRateUSPrevYear = 1;
            var currentYear = DateTime.Now.Year;
            var prevYear = DateTime.Now.AddYears(-1).Year;
            var londonDBSource = "London";
            var usaDBSource = "USA";
            List<int> years = new List<int>() { DateTime.Now.AddYears(-1).Year, DateTime.Now.Year, DateTime.Now.AddYears(1).Year };
            Dictionary<string, string> personalIds = new Dictionary<string, string>() { { "Paris", "10601282" }, { "London", "10600510" } };

            var fxRates = _service.GetFxRates();
            foreach (FxRate fxRate in fxRates)
            {
                if (fxRate.Name == "GBP" && fxRate.Year == currentYear)
                {
                    fxRateGBP = fxRate.Rate;
                }
                else if (fxRate.Name == "US" && fxRate.Year == currentYear)
                {
                    fxRateUS = fxRate.Rate;
                }
                else if (fxRate.Name == "GBP" && fxRate.Year == prevYear)
                {
                    fxRateGBPPrevYear = fxRate.Rate;
                }
                else if (fxRate.Name == "US" && fxRate.Year == prevYear)
                {
                    fxRateUSPrevYear = fxRate.Rate;
                }
            }


            //Refresh Crapull
            var dtCrapullAll = new DataTable();
            var dbDetails = new Dictionary<string, string>() { { "Paris", _crapullConfiguration.Crapull }, { "London", _crapullConfiguration.Crapull_LDN } };
            foreach (int yearVal in years)
            {
                foreach (KeyValuePair<string, string> dbDetail in dbDetails)
                {
                    var personalId = personalIds[dbDetail.Key];
                    var yy = yearVal % 100;
                    var dtCrapull = new DataTable();
                    var query = "SynthesePrevIntervenant_Pere " + yy + "," + yy + "," + personalId + ",0";
                    dtCrapull.Merge(DBFunction.GetDataTableFromsqlQuery(dbDetail.Value, query));
                    dtCrapull.Columns.Add("DBSource", typeof(string));
                    dtCrapull.Columns.Add("CodeCDRStr", typeof(string));
                    foreach (DataRow row in dtCrapull.Rows)
                    {
                        row["DBSource"] = dbDetail.Key;
                        row["CodeCDRStr"] = Convert.ToString(row["CDR_CodeCDR"]);
                    }

                    dtCrapullAll.Merge(dtCrapull);
                }
            }

            string stagingCrapullTableName = "[Staging].[Crapull]";
            // Create Staging Table if not availabel in DB
            if (!DBFunction.checkIfTableExist(stagingCrapullTableName, _connectionString))
            {
                DBFunction.CreateTable(_connectionString, stagingCrapullTableName, dtCrapullAll);
            }

            // Bulk Load data in Crapull Table
            DBFunction.BulkLoad(dtCrapullAll, _connectionString, stagingCrapullTableName);

            // Add USA db details
            dbDetails.Add("USA", _crapullConfiguration.Crapull_USA);

            var dtDailyRateAll = new DataTable();
            foreach (int yearVal in years)
            {
                foreach (KeyValuePair<string, string> conDetail in dbDetails)
                {
                    var dtDailyRate = new DataTable();
                    var query = "[dbo].[ListeContrat] " + yearVal + ",NULL,NULL,NULL";
                    dtDailyRate.Merge(DBFunction.GetDataTableFromsqlQuery(conDetail.Value, query));
                    dtDailyRate.Columns.Add("DBSource", typeof(string));
                    dtDailyRate.Columns.Add("Year", typeof(int));
                    foreach (DataRow row in dtDailyRate.Rows)
                    {
                        row["DBSource"] = conDetail.Key;
                        row["Year"] = yearVal;
                    }

                    dtDailyRateAll.Merge(dtDailyRate);
                }
            }

            string dailyRateDatabasename = "[Staging].[Crapull_DailyRate]";
            // Create Staging Table if not availabel in DB
            if (!DBFunction.checkIfTableExist(dailyRateDatabasename, _connectionString))
            {
                DBFunction.CreateTable(_connectionString, dailyRateDatabasename, dtDailyRateAll);
            }

            // Bulk Load data in Crapull Table
            DBFunction.BulkLoad(dtDailyRateAll, _connectionString, dailyRateDatabasename);

            var dailyRateList = _service.GetDailyRate();
            // FX Conversion dailyRate
            foreach (var item in dailyRateList)
            {
                decimal dailyRateConversion = 0;
                if (item.DBSource == londonDBSource && (item.Year == currentYear || item.Year == prevYear))
                {
                    dailyRateConversion = Convert.ToDecimal(item.TarifJournalier) / (item.Year == currentYear ? fxRateGBP : fxRateGBPPrevYear);
                    _service.UpdateDailyRateWithFxRate(dailyRateConversion, item.CodeUT, item.Year);
                }
                else if (item.DBSource == usaDBSource && (item.Year == currentYear || item.Year == prevYear))
                {
                    dailyRateConversion = Convert.ToDecimal(item.TarifJournalier) / (item.Year == currentYear ? fxRateUS : fxRateUSPrevYear);
                    _service.UpdateDailyRateWithFxRate(dailyRateConversion, item.CodeUT, item.Year);
                }
            }

            var dtTbdDailyRateAll = new DataTable();
            foreach (KeyValuePair<string, string> conDetail in dbDetails)
            {
                var dtTdbDailyRate = new DataTable();
                dtTdbDailyRate.Merge(DBFunction.GetDataTableFromsqlQuery(conDetail.Value, "Select * FROM [dbo].[Recrue]")); // DailyRate in Euros
                dtTdbDailyRate.Columns.Add("DBSource", typeof(string));
                foreach (DataRow row in dtTdbDailyRate.Rows)
                {
                    row["DBSource"] = conDetail.Key;
                }

                dtTbdDailyRateAll.Merge(dtTdbDailyRate);
            }

            string tbdDailyRateTabelName = "[Staging].[Crapull_TBDDailyRate]";
            if (!DBFunction.checkIfTableExist(tbdDailyRateTabelName, _connectionString))
            {
                DBFunction.CreateTable(_connectionString, tbdDailyRateTabelName, dtTbdDailyRateAll);
            }

            DBFunction.BulkLoad(dtTbdDailyRateAll, _connectionString, tbdDailyRateTabelName);

            var tbdDailyRateList = _service.GetTbdDailyRate();
            // FX Conversion tbdDailyRate
            foreach (var tbdItem in tbdDailyRateList)
            {
                if (tbdItem.DBSource == londonDBSource || tbdItem.DBSource == usaDBSource)
                {
                    var dailyRateConversion = Convert.ToDecimal(tbdItem.TarifJournalier) / (tbdItem.DBSource == londonDBSource ? fxRateGBP : fxRateUS);
                    _service.UpdateTbdDailyRateWithFxRate(dailyRateConversion, tbdItem.IdRecrue);
                }
            }

            //ProcessData
            //Staff
            var sql = ";WITH " +
                " StaffUbCodes AS(" +
                "   SELECT" +
                "            c.codeut," +
                "           c.[year of charge]," +
                "           STRING_AGG(CONVERT(NVARCHAR(max), CDR_CodeCDR), ',') WITHIN GROUP(ORDER BY CDR_CodeCDR ASC) AS UbConcat" +
                "    FROM(SELECT DISTINCT codeut, [year of charge], CDR_CodeCDR FROM staging.Crapull where codeut != '') c" +
                "  GROUP BY codeut, [year of charge]" +
                " )," +
                " StaffTeams AS( " +
                "    SELECT" +
                "            c.CodeUT," +
                "            c.[year of charge]," +
                "            STRING_AGG(CONVERT(NVARCHAR(max), c.Team), ',') WITHIN GROUP(ORDER BY c.Team ASC) AS TeamConcat" +
                "    FROM(SELECT DISTINCT codeut, [year of charge], Team FROM staging.Crapull  WHERE codeut != '') c" +
                "  GROUP BY codeut, [year of charge]" +
                " ), " +
                " TbdStaffUbCodes AS( " +
                "    select" +
                "            C.intervenant," +
                "            C.[year of charge]," +
                "            STRING_AGG(CONVERT(NVARCHAR(max), c.CDR_CodeCDR), ',') WITHIN GROUP(ORDER BY c.CDR_CodeCDR ASC) AS UbConcat" +
                "    FROM(SELECT DISTINCT intervenant, [year of charge], CDR_CodeCDR FROM staging.Crapull WHERE codeut = '') c" +
                "  GROUP BY intervenant, [year of charge]" +
                " ) " +
                " SELECT ROW_NUMBER() OVER(ORDER BY  (SELECT 1)) AS Id , * FROM  (" +
                " SELECT  cp.[year of charge], " +
                   "'' [FullName], " +
                   "cp.codeut[UTCODE], " +
                   "ub.CodeCDR[UBCode], " +
                   "suc.UbConcat [UBCodeConcat]," +
                   "MAX(cp.[Type Intervenant]) [SourcingType]," +
                   "st.TeamConcat [TeamName], " +
                   "'' [RCPCountryName]," +
                   "'' [Entity]," +
                   "sd.DateDebut[StartDate], " +
                   "dr.TarifJournalier[DailyRate], " +
                   "sum(CAST(cp.NBJours AS DECIMAL(10, 2)))[TotalMD], " +
                   "CAST(dr.TarifJournalier AS DECIMAL(10, 2)) * sum(CAST(cp.NBJours AS DECIMAL(10, 2)))[TotalKeuro], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 1 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JAN], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 1 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JAN_NotInvoicable]," +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 2 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[FEB]," +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 2 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[FEB_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 3 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAR], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 3 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAR_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 4 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[APR], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 4 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[APR_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 5 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAY], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 5 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAY_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 6 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUN], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 6 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUN_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 7 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUL], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 7 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUL_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 8 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[AUG], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 8 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[AUG_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 9 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[SEP], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 9 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[SEP_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 10 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[OCT], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 10 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[OCT_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 11 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[NOV], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 11 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[NOV_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 12 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[DEC], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 12 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[DEC_NotInvoicable], " +
                   "SUM(case when BR.Id IS NOT NULL AND BR.IsBuild = 1 AND  BRPE.Id IS NOT NULL THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END) BuildTotal, " +
                   "SUM(case when BR.Id IS NOT NULL AND BR.IsBuild = 0 AND  BRPE.Id IS NOT NULL THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END) RunTotal " +
                   "FROM " + stagingCrapullTableName + " cp " +
                   "left JOIN Loris.Staff ls ON ls.UTCode = cp.CodeUT " +
                   "LEFT JOIN RefBuildRun BR ON BR.DBCountry = cp.DBSource and BR.ProjectType = cp.PRJ_cnpLibelle " +
                   "LEFT JOIN RefBuildRunProjectExclusion BRPE ON BRPE.DBCountry = cp.DBSource and cp.PRJ_CodeProjet not in (select[value] from Loris.SplitString(BRPE.ProjectCodes, ',')) " +
                   "LEFT JOIN StaffUbCodes suc ON suc.CodeUT = cp.CodeUT AND suc.[year of charge] = cp.[year of charge] " +
                   "LEFT JOIN StaffTeams st ON st.CodeUT = cp.CodeUT AND st.[year of charge] = cp.[year of charge] " +
                   "cross apply(Select TarifJournalier = CASE WHEN cp.CodeUT != '' THEN CAST((select top 1 TarifJournalier from " + dailyRateDatabasename + " where CodeUT = cp.CodeUT AND Year = cp.[year of charge] ORDER BY IdContrat desc)AS DECIMAL(10, 2)) ELSE 0.00 END) as dr " +
                   "cross apply(Select DateDebut = CASE WHEN cp.CodeUT != '' THEN(select top 1 DateDebut from" + dailyRateDatabasename + " where CodeUT = cp.CodeUT ORDER BY DateDebut desc)ELSE null END) as sd " +
                   "cross apply(Select CodeCDR = CASE WHEN cp.CodeUT != '' THEN(select top 1 CodeCDR from " + dailyRateDatabasename + " where CodeUT = cp.CodeUT ORDER BY DateDebut desc)ELSE null END) as ub  " +
                   "WHERE cp.CodeUT != ''" +
                   "GROUP BY  cp.[year of charge], cp.codeut, dr.TarifJournalier, sd.DateDebut, ub.CodeCDR, suc.UbConcat, st.TeamConcat" +

                   " UNION ALL  " +
                   // TBD Staff
                   "SELECT  cp.[year of charge], " +
                   "cp.intervenant[FullName], " +
                   "cp.codeut[UTCODE], " +
                   "cp.CDR_CodeCDR [UBCode]," +
                   "suc.UbConcat [UBCodeConcat], " +
                   "MAX(cp.[Type Intervenant]) [SourcingType]," +
                   "cp.team [TeamName]," +
                   "'' [RCPCountryName]," +
                   "(CASE WHEN CDR_LibelleCDR LIKE '%ISAP%' THEN 'Singapore'" +
                   "WHEN CDR_LibelleDomaineCDR LIKE '%CMI%' AND DBSource = 'Paris' THEN 'Paris'" +
                   "WHEN CDR_LibelleDomaineCDR Like '%CMI%' AND DBSource = 'London' THEN 'London' END)[Entity], " +
                   "null [StartDate], " +
                   "dr.TarifJournalier[DailyRate], " +
                   "sum(CAST(cp.NBJours AS DECIMAL(10, 2)))[TotalMD], " +
                   "CAST(dr.TarifJournalier AS DECIMAL(10, 2)) * sum(CAST(cp.NBJours AS DECIMAL(10, 2)))[TotalKeuro], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 1 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JAN], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 1 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JAN_NotInvoicable]," +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 2 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[FEB]," +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 2 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[FEB_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 3 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAR], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 3 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAR_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 4 THEN  CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[APR], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 4 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[APR_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 5 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAY], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 5 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[MAY_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 6 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUN], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 6 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUN_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 7 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUL], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 7 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[JUL_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 8 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[AUG], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 8 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[AUG_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 9 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[SEP], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 9 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[SEP_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 10 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[OCT], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 10 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[OCT_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 11 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[NOV], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 11 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[NOV_NotInvoicable], " +
                   "SUM(CASE when cp.PRJ_Facturable != 'Non' AND cp.PRJ_Facturable != 'No' THEN CASE cp.Mois WHEN 12 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[DEC], " +
                   "SUM(CASE when cp.PRJ_Facturable = 'Non' OR cp.PRJ_Facturable = 'No' THEN CASE cp.Mois WHEN 12 THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END ELSE 0 END)[DEC_NotInvoicable], " +
                   "SUM(CASE WHEN BR.Id IS NOT NULL AND BR.IsBuild = 1 AND BRPE.Id IS NOT NULL THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END) BuildTotal, " +
                   "SUM(CASE WHEN BR.Id IS NOT NULL AND BR.IsBuild = 0 AND BRPE.Id IS NOT NULL THEN CAST(cp.NBJours AS DECIMAL(10, 2)) ELSE 0 END) RunTotal " +
                   "FROM " + stagingCrapullTableName + " cp " +
                   "LEFT JOIN RefBuildRun BR ON BR.DBCountry = cp.DBSource and BR.ProjectType = cp.PRJ_cnpLibelle " +
                   "LEFT JOIN RefBuildRunProjectExclusion BRPE ON BRPE.DBCountry = cp.DBSource and cp.PRJ_CodeProjet not in (select[value] from Loris.SplitString(BRPE.ProjectCodes, ',')) " +
                   "LEFT JOIN TbdStaffUbCodes suc ON suc.intervenant = cp.intervenant AND suc.[year of charge] = cp.[year of charge] " +
                   "cross apply(Select TarifJournalier = CASE WHEN cp.CodeUT = '' THEN CAST((select top 1 TarifJournalier from " + tbdDailyRateTabelName + " where NomRecrue = cp.Intervenant ORDER BY IdRecrue desc)AS DECIMAL(10, 2)) ELSE 0.00 END) as dr " +
                   "WHERE  cp.CodeUT = ''" +
                   "GROUP BY  cp.[year of charge], cp.intervenant, cp.codeut , cp.team, dr.TarifJournalier, DBSource, cp.CDR_CodeCDR, cp.CDR_LibelleCDR, cp.CDR_LibelleDomaineCDR, suc.UbConcat" +
                   ") crapull";

            var dtProcessCrapull = DBFunction.GetDataTableFromsqlQuery(_connectionString, sql);
            string crapullDatabasename = "[dbo].[Crapull]";
            if (DBFunction.checkIfTableExist(crapullDatabasename, _connectionString))
            {
                string yearVal = string.Empty;
                foreach (int year in years)
                {
                    yearVal = yearVal + (yearVal.Length > 0 ? "," : "") + year.ToString();
                }

                var condition = " WHERE [year of charge] IN (" + yearVal + ")";
                DBFunction.BulkLoad(dtProcessCrapull, _connectionString, crapullDatabasename, true, condition);
            }

            var TBDStaffquery =
                "SELECT intervenant TBDStaffName , CDR_CodeCDR UBCode, Team CrapullTeamName, " +
                "CONVERT(DATETIME, CAST( [Year Of Charge] AS VARCHAR(4)) + '-' + CAST(min(Mois)AS VARCHAR(4)) + '-01') FROMDate, " +
                "CAST(eomonth(CONVERT(DATETIME, CAST( [Year Of Charge] AS VARCHAR(4)) + '-' + CAST(max(Mois) AS VARCHAR(4)) + '-01')) AS datetime) EndDate, " +
                "(CASE WHEN CDR_LibelleCDR LIKE '%ISAP%' THEN 'Singapore' " +
                "WHEN CDR_LibelleDomaineCDR LIKE '%CMI%' AND DBSource = 'Paris' THEN 'Paris' " +
                "WHEN CDR_LibelleDomaineCDR Like '%CMI%' AND DBSource = 'London' THEN 'London' END) [Location], " +
                "SUM(CAST(NbJours AS decimal)) Mandays " +
                "FROM(SELECT * FROM staging.crapull WHERE CDR_LibelleCDR LIKE '%ISAP%' AND CDR_LibelleCDR LIKE '%CMI%' AND codeUT NOT LIKE 'UT%' " +
                "UNION ALL " +
                "SELECT * FROM staging.crapull WHERE codeUT NOT LIKE 'UT%' AND CDR_LibelleDomaineCDR LIKE '%CMI%') s " +
                "GROUP BY intervenant, CDR_CodeCDR,[Year Of Charge], DBSource, CDR_LibelleDomaineCDR, CDR_LibelleCDR, Team ";

            var tbdstaff = DBFunction.GetDataTableFromsqlQuery(_connectionString, TBDStaffquery);
            string tbdstaffDatabasename = "[Staging].[TBDStaff]";
            DBFunction.DropTable(tbdstaffDatabasename, _connectionString);
            if (!DBFunction.checkIfTableExist(tbdstaffDatabasename, _connectionString))
            {
                DBFunction.CreateTable(_connectionString, tbdstaffDatabasename, tbdstaff);
            }

            DBFunction.BulkLoad(tbdstaff, _connectionString, tbdstaffDatabasename);
            return await Task.FromResult(true);
        }

        public async Task<bool> UpdateStaffDetails()
        {
            var crapulldata = await _crapullDataAccess.GetAllAsync();
            var crapullTBDDailyRate = await _crapullDataAccess.GetAllTBDDailyRateAsync();
            crapullTBDDailyRate = crapullTBDDailyRate.Where(s => !crapulldata.Where(staff => !string.IsNullOrEmpty(staff.UTCODE)).Select(staff => staff.FullName).Contains(s.TBDName));

            await _lorisStaffDataAccess.UpdateStaffUBCodeAsync(crapulldata.Where(s => !string.IsNullOrEmpty(s.UTCODE) && s.YearOfCharge == DateTime.Now.Year).GroupBy(s => s.UTCODE).Select(s => new { s.Key, r = s.FirstOrDefault() }).ToDictionary(s => s.Key, s => s.r.UBCODE.HasValue ? s.r.UBCODE.ToString() : string.Empty));
            await _lorisStaffDataAccess.UpdateStaffResourceCostAsync(crapulldata.Where(s => !string.IsNullOrEmpty(s.UTCODE) && s.YearOfCharge == DateTime.Now.Year).GroupBy(s => s.UTCODE).Select(s => new { s.Key, r = s.FirstOrDefault() }).ToDictionary(s => s.Key, s => s.r.DailyRate ?? 0));
            await _tbdStaffDataAccess.UpdateTBDStaffResourceCostAsync(crapulldata.Where(s => string.IsNullOrEmpty(s.UTCODE) && s.YearOfCharge == DateTime.Now.Year)
                .GroupBy(c => new { c.FullName }).Select(g => new { g.Key, r = g.FirstOrDefault() }).ToDictionary(s => s.Key.ToString(), s => s.r.DailyRate ?? 0));
            await _tbdStaffDataAccess.UpdateTBDStaffResourceCostAsync(crapullTBDDailyRate.Where(s => !string.IsNullOrEmpty(s.TBDName))
                .GroupBy(s => s.TBDName).Select(s => new { s.Key, r = s.FirstOrDefault() }).ToDictionary(s => s.Key, s => s.r.DailyRate));

            return true;
        }

        public async Task<bool> RefreshAndUpdateDetails()
        {
            await RefreshAsync();
            await UpdateStaffDetails();
            return true;
        }
    }
}