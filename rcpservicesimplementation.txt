using Giraffe.RCP.Configurations;
using Giraffe.RCP.DataObjects;
using Giraffe.RCP.Interfaces;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Giraffe.RCP
{
    class RCPServicesImplementation : IRCPServices
    {
        public readonly RCPService.RCPServiceClient _client;
        public readonly RCPServiceConfiguration _config;
        public RCPServicesImplementation(IOptions<RCPServiceConfiguration> config)
        {
            _config = config.Value;
            _client = new RCPService.RCPServiceClient(RCPService.RCPServiceClient.EndpointConfiguration.BasicHttpBinding_IRCPService, _config.RCPUrl);
        }

        public async Task<PersonDataObject> GetPersonByUTCodeAsync(string utCode)
        {
            return (await this.GetPersonByUTCodeAsync(new List<string> { utCode })).FirstOrDefault();
        }

        public async Task<IEnumerable<PersonDataObject>> GetPersonByUTCodeAsync(IEnumerable<string> utCodes)
        {
            var data = (await _client.SearchPersonsByUTsAsync(utCodes.ToArray(), _config.NBMaxRep))
                .ArrayOfCandidates.Where(s => s.Persons != null).Select(s => s.Persons.FirstOrDefault());
            if (data.FirstOrDefault()!=null)
            {
                return data.Select(s => new PersonDataObject
                {
                    Country = s.country,
                    UTCode = s.codeUT,
                    Email = s.email,
                    FirstName = s.firstname,
                    LastName = s.lastname,
                    ManagerUTCode = s.Manager_codeUT,
                    ManagerName = $"{s.Manager_EXP_nom}, {s.Manager_EXP_prenom}",
                    Salutation = s.OVP_civilite_rdt,
                    IsActive = s.C_Etat, 
                    BusinessLine = s.Business_Line
                });
            }
            return new List<PersonDataObject>();
        }

        public async Task<IEnumerable<PersonDataObject>> FetchRCPData(IEnumerable<String> utCodeList)
        {            
            utCodeList = utCodeList?.Where(x => x.Trim().ToUpper().Contains("UT"));
            List<PersonDataObject> personDataObjectsList = new List<PersonDataObject>();
            if (utCodeList != null && utCodeList.Any())
            {
                int totalStaffCount = utCodeList.Count();
                int skipCount = 0;
                int takeCount = 2000;
                while (totalStaffCount > 0)
                {
                    IEnumerable<PersonDataObject> personDataObjects = await GetPersonByUTCodeAsync(utCodeList.Skip(skipCount).Take(takeCount));
                    personDataObjectsList.AddRange(personDataObjects);
                    skipCount = skipCount + takeCount;
                    totalStaffCount = totalStaffCount - takeCount;
                }
            }

            return personDataObjectsList;
        }
    }
}